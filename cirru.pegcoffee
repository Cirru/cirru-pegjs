{
  count = (n) ->
    Math.ceil (n / 2)
  @marks = []
  @level = 0
  @return_x = -> "xxxxx"
  @unshift = (head, body) ->
    body.unshift head
    body
  @join = (list) ->
    string = list.join ""
    string
  @mark = =>
    console.log "mark $"
    @marks.push @level
  @indent = (level) =>
    level = count level
    console.log "level is:", level
    isIndent = level > @level
    @level = level
    null unless isIndent
  @dedent = (level) =>
    level = count level
    isDedent = level < @level
    @level = level
    null unless isDedent
}


start
= seps* head:sentence body:seps_sentence* seps* { @unshift head, body }


seps_sentence
= seps sentence:sentence { sentence }


sentence
= head:exp body:seps_exp* { @unshift head, body }


seps_exp
= sep exp:exp { exp }


spaces_exp
= space+ exp:exp { exp }


exp
= words:word+ { @join words }
/ "(" space* head:exp body:spaces_exp* space* ")" { @unshift head, body }
/ "(" space+ ")" { [] }
/ "$" exp:spaces_exp* space* { @mark(); exp }
/ space* indent exp dedent { exp }


indent
= "\n" level:space* { @indent level }


dedent
= "\n" level:space* { @count level}


word 
= chars:([^"\\\0-\x1F\x7f()$ ]char*) { @join chars }
/ string:string { string }


string
= '"' buffer:buffer* '"' { @join buffer }


buffer
= char:char { char }
/ " " { " " }
/ '\\"' { '"' }
/ "\\\\" { "\\" }
/ "\\/"  { "/" }
/ "\\b"  { "\b" }
/ "\\f"  { "\f" }
/ "\\n"  { "\n" }
/ "\\r"  { "\r" }
/ "\\t"  { "\t" }

char
= char:[^"\\\0-\x1F\x7f() ] { char }


line_break
= "\n"


seps
= sep+


sep
= space
/ newline


space
= " "


newline
= "\n"