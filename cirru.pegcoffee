{
  count = (n) ->
    Math.ceil (n / 2)
  
  @marks = []
  
  @level = 0

  @unshift = (head, body) ->
    body.unshift head
    body
  
  @join = (list) ->
    list.join ""
  
  @mark = =>
    console.log "mark $"
    @marks.push @level
  
  @indent = (level) =>
    level = count level.length
    isIndent = level > @level
    console.log "#{@level} -> #{level} :: #{isIndent}"
    @level = level
    null unless isIndent
}

start
= newline* head:sentence body:n_and_sentence* newline* { @unshift head..., body }
/ newline* { [] }


n_and_sentence
= newline sentence:sentence { sentence }


sentence
= head:exp body:space_and_exp* { @unshift head, body }


space_and_exp
= space exp:exp { exp }


space_and_exp
= space exp:exp { exp }


exp
= phrase:phrase indent exp:exp+ { [phrase..., exp...] }
/ "(" space* head:exp body:space_and_exp* ")" { @unshift head, body }
/ "(" space ")" { [] }
/ "$" exp:space_and_exp* { @mark(); exp }
/ phrase:phrase { phrase }


phrase
= head:word body:(space_and_word)* { @unshift head, body }


indent
= newline level:a_space* { @indent level }


space_and_word
= space word:word { word }


word 
= chars:([^"\\\0-\x1F\x7f()$ ]char*) { @join chars }
/ string:string { string }


string
= '"' buffer:buffer* '"' { @join buffer }


buffer
= char:char { char }
/ " " { " " }
/ '\\"' { '"' }
/ "\\\\" { "\\" }
/ "\\/"  { "/" }
/ "\\b"  { "\b" }
/ "\\f"  { "\f" }
/ "\\n"  { "\n" }
/ "\\r"  { "\r" }
/ "\\t"  { "\t" }


char
= char:[^"\\\0-\x1F\x7f() ] { char }


newline
= (space* n)+


n
= "\n"


space
= space:[ ]+ { @join space }


a_space
= " "